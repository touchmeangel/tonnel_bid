name: Deploy tonnel_bid_logger Bot

on:
  push:
    branches: [main]

jobs:
  docker-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PSWD }}" | docker login -u "${{ secrets.DOCKER_NAME }}" --password-stdin

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest

      - name: Push image to DockerHub
        run: docker push ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest

  server-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Create SSH key file
        run: |
          echo "${{ secrets.SSH_KEY }}" > ./vps_key
          chmod 600 ./vps_key

      - name: Add VPS host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      - name: Connect to VPS and deploy
        run: |
          ssh -o StrictHostKeyChecking=accept-new -i ./vps_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -euo pipefail
          
          IMAGE_NAME="${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest"
          
          echo "Logging into Docker..."
          echo "${{ secrets.DOCKER_PSWD }}" | docker login -u "${{ secrets.DOCKER_NAME }}" --password-stdin
          
          cd ${{ vars.WORK_DIR }}
          
          echo "Pulling latest image: $IMAGE_NAME"
          docker pull "$IMAGE_NAME"
          
          # Find services using this image
          if command -v yq >/dev/null 2>&1; then
            SERVICES=$(docker compose config | yq e ".services | to_entries | map(select(.value.image == \"$IMAGE_NAME\")) | .[].key" - | tr '\n' ' ')
          else
            # Fallback: extract from docker compose config
            SERVICES=$(docker compose config | grep -A 1 "image: $IMAGE_NAME" | grep -B 1 "image:" | grep "^  [a-zA-Z]" | sed 's/://g' | xargs)
          fi
          
          SERVICES=$(echo "$SERVICES" | xargs)
          
          if [[ -z "$SERVICES" ]]; then
            echo "‚ö†Ô∏è  No services found using image $IMAGE_NAME"
            exit 1
          fi
          
          echo "üîÑ Restarting services: $SERVICES"
          
          for svc in $SERVICES; do
            echo "  ‚Üí Restarting $svc..."
            docker compose up -d --force-recreate --no-deps "$svc"
          done
          
          echo "üßπ Cleaning up old images..."
          docker image prune -af --filter "until=24h"
          
          echo "‚úÖ Deployment completed!"
          EOF
        shell: bash