name: Deploy tonnel_bid_logger Bot

on:
  push:
    branches: [main]

jobs:
  docker-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PSWD }}" | docker login -u "${{ secrets.DOCKER_NAME }}" --password-stdin

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest

      - name: Push image to DockerHub
        run: docker push ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest
  

  server-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Create SSH key file
        run: |
          echo "${{ secrets.SSH_KEY }}" > ./vps_key
          chmod 600 ./vps_key

      - name: Add VPS host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Connect to VPS/actions
        run: |
          ssh -i ./vps_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
          echo "${{ secrets.DOCKER_PSWD }}" | docker login -u "${{ secrets.DOCKER_NAME }}" --password-stdin
          cd ${{ vars.WORK_DIR }}
          docker pull "${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}" || true
          SERVICES=$(docker compose config --services --quiet | while read svc; do
            img=$(docker compose config | awk "/^services:/,/^$/ {flag=0} /^services:/{flag=1} flag && \$1 == \"$svc:\" { in_svc=1 } in_svc && /image:/ { gsub(/image: */,\"\", \$2); print \$2; break } in_svc && /^[^ ]/ && \$1 !~ /^[ ]/ { in_svc=0 }" | tr -d '\r')
            if [ "$img" = "${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}" ]; then
              echo "$svc"
            fi
          done)

          if [ -z "$SERVICES" ]; then
            echo "No services found that use image ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}"
            exit 0
          fi

          echo "Services using ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}: $SERVICES"

          for svc in $SERVICES; do
            echo "Stopping service $svc"
            docker compose stop "$svc" || true

            echo "Recreating $svc with new image"
            docker compose up -d --no-deps --build "$svc"
          done

          echo "Cleaning up dangling images for ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}"
          docker images "${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}" --filter "dangling=true" --format "{{.ID}}" | xargs --no-run-if-empty docker rmi || true

          echo "Done."
          '