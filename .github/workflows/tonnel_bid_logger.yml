name: Deploy tonnel_bid_logger Bot

on:
  push:
    branches: [main]

jobs:
  docker-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PSWD }}" | docker login -u "${{ secrets.DOCKER_NAME }}" --password-stdin

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest

      - name: Push image to DockerHub
        run: docker push ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest
  

  server-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Create SSH key file
        run: |
          echo "${{ secrets.SSH_KEY }}" > ./vps_key
          chmod 600 ./vps_key

      - name: Add VPS host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      - name: Connect to VPS and deploy
        run: |
          ssh -i ./vps_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            echo "${{ secrets.DOCKER_PSWD }}" | docker login -u "${{ secrets.DOCKER_NAME }}" --password-stdin
            cd ${{ vars.WORK_DIR }}
            
            # Pull the latest image
            docker pull "${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest"
      
            SERVICES=""
            if command -v yq >/dev/null 2>&1; then
              SERVICES=$(docker compose config \
                          | yq e ".services | to_entries | map(select(.value.image == \"${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest\")) | .[].key" -)
            else
              config=$(docker compose config)
              current_service=""
              inside_services=0
              while IFS= read -r line; do
                if [[ $line =~ ^services: ]]; then
                  inside_services=1
                  continue
                fi
                if [[ $inside_services -eq 1 && "$line" =~ ^[[:space:]]{2}[^[:space:]] ]]; then
                  current_service=$(echo "$line" | sed -E 's/^[[:space:]]{2}([^:]+):.*/\1/')
                  continue
                fi
                if [[ -n "$current_service" && "$line" =~ ^[[:space:]]{4}image:[[:space:]]*(.*)$ ]]; then
                  img_value=$(echo "$line" | sed -E 's/^[[:space:]]{4}image:[[:space:]]*(.*)$/\1/')
                  if [[ "$img_value" == "${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest" ]]; then
                    SERVICES="$SERVICES $current_service"
                  fi
                  current_service=""
                fi
              done <<< "$config"
            fi
      
            if [[ -z "${SERVICES// /}" ]]; then
              echo "No services found using image ${{ secrets.DOCKER_NAME }}/${{ vars.IMAGE_NAME }}:latest"
              exit 0
            fi
      
            echo "Services to rebuild: $SERVICES"
            for svc in $SERVICES; do
              docker compose stop "$svc"
              docker compose rm -f "$svc"
              docker compose up -d --no-deps "$svc"
            done
      
            # Cleanup old images
            docker image prune -f
          EOF
        shell: bash